# -*- coding: utf-8 -*-
"""CleaningAndExploringDataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RIkI2YyzdKF1mkPWHEKCEBth7Kcvlf0M
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import numpy as np
import pandas as pd
#Importing required packages

import google.colab.files as files
uploaded = files.upload()

#Uploading the files to work with

df=pd.read_csv('train[1].csv')
#Using pandas to read the csv file

df.shape   #Checking size of the data

df.info()

df.describe()   # described only numeric values

categorical=df.dtypes[df.dtypes=="object"].index    #detail of columns holding values that are not numbers
print(categorical)

df[categorical].describe()

#Inspecting the records
df.head(5)

#Lets make the passenger Id be the index id
df.index=df["PassengerId"]
del df["PassengerId"]

df.head(5)

#Should I consider all the variable?
# Do i need to transform any variables?
# Are there any NA, outliers or strange variables?
# Should i create new variable.

#Transforming Survided Class
new_survived=pd.Categorical(df["Survived"])
new_survived=new_survived.rename_categories(["Died","Survived"])

new_survived.describe()

# Turning the Integer Pclass into categorial because Class1 is higher than Class2 but in integer 2 is higher than 1
new_Pclass=pd.Categorical(df["Pclass"],ordered=True)
new_Pclass=new_Pclass.rename_categories(["Class1","Class2","Class3"])

new_Pclass.describe()

df["Pclass"]=new_Pclass

df.head(5)

df["Cabin"].unique()

# Considering the cabin section now.
char_cabin=df["Cabin"].astype(str) #Convert data to str
new_cabin=np.array([cabin[0] for cabin in char_cabin])  # Taking first letter of the string
new_cabin=pd.Categorical(new_cabin)
new_cabin.describe()
#Now this section describes how many passengers where in certain cabin of the ship

df["Cabin"]=new_cabin

df.head(5)

#Now checking NA, outliers or Stranger values?
#CHecking it by using "isNull"

miss_age=np.where(df["Age"].isnull()==True)   # Shows value in given indices position
miss_age

len(miss_age[0])

#Setting the age null value to mean value is ok, but estimation can be wrong without looking at the distribution of ages.

df.hist(column="Age",   #Columns to plot
        figsize=(9,6),  #Plot Size
        bins=20)        #no. of histrogram bins

new_age_var=np.where(df["Age"].isnull(),  #Logical Check
                     28,                  #Value if true
                     df["Age"])           #Value if wrong

df["Age"]=new_age_var
df["Age"].describe()

#Setting the age value to mean value now
df.hist(column="Age",   #Columns to plot
        figsize=(9,6),  #Plot Size
        bins=20)        #no. of histrogram bins

df["Fare"].plot(kind="box",figsize=(9,9))

# Find the maximum fare
max_fare = df['Fare'].max()

# Filter the DataFrame to select rows with the maximum fare
max_fare_passengers = df[df['Fare'] == max_fare]

# Display the rows for passengers with the maximum fare
print(max_fare_passengers)

#Creating new variables when required
df["Family"]=df["SibSp"]+df["Parch"]
df.head()

# most_family=np.where(df["Family"]==max(df["Family"]))
# df.loc[most_family]

max_fam = df['Family'].max()
# Filter the DataFrame to select rows with the maximum fare
max_fam= df[df['Family'] == max_fam]

# Display the rows for passengers with the maximum fare
print(max_fam)

